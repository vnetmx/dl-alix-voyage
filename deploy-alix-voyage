#!/bin/bash

#######################################################################
# Copyright 2013 
#    Demand Logic limited <info@demandlogic.co.uk>
#    Nils Toedtmann <nils.toedtmann@demandlogic.co.uk>
#
# This file is part of DemandLogic's ALIX deployment scripts :
#
#    <https://github.com/DemandLogic/dl-alix-voyage>
#
# DemandLogic's ALIX deployment scripts is free software: you can 
# redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# DemandLogic's ALIX deployment scripts is distributed in the hope that
# it will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DemandLogic's ALIX deployment scripts. If not, see 
# <http://www.gnu.org/licenses/>.
#######################################################################


#######################################################################
# A little script to deploy Voyage Linux
# onto a compact flash card (CF) for a PC Engine ALIX board
#######################################################################


CFDEV="/dev/doesNotExist"
MNTPNT="/mnt/cf"
ROOTFS_SIZE="+800M"
OPT_FS_SIZE="+500M"

VER="0.9.2"
DIST_BASE=${PWD}
DIST_DIR=${DIST_BASE}/voyage-${VER}

BASE="$(cd "$(dirname "$0")" ; pwd)"
SKEL="${BASE}/skel"
CHROOT_SCRIPT="${BASE}/deploy-alix-voyage-chroot"

HOSTNAME="voyage.example.com"
ROOTALIAS="rootmail@example.com"
RELAYHOST=

SSH_KEYS="nils.toedtmann.dsa.pub"
SSH_KEY_REPO="https://raw.githubusercontent.com/nilstoedtmann/sshkeys/master"

CA_BASE=/path/to/your/certificate/dir
VPN_CLIENT_CERT=${HOSTNAME}.crt
VPN_CLIENT_KEY=${HOSTNAME}.key
VPN_REMOTE='vpn.example.com 1194'


CONF=${BASE}/deploy-alix-voyage.conf
if [ -r $CONF ] ; then
    . $CONF
fi


# Set simple locale
export LANG="C"
unset LANGUAGE LC_ALL LC_PAPER LC_ADDRESS LC_MONETARY LC_NUMERIC LC_TELEPHONE LC_IDENTIFICATION LC_MEASUREMENT LC_TIME LC_NAME
perl -e exit  # test locale


####################
# Functions

_log() {
    echo "INFO: ${@}"
}


####################
_log "START STAGE 1/5: Preparing CF"

_log "Installing required packges on the host system" 
sudo apt-get install parted patch

_log "Clearing partition table on ${CFDEV}"
dd if=/dev/zero bs=1 seek=446 count=64 of=${CFDEV}

_log "Adding partitions to partition table on ${CFDEV}"
#echo -e "n\np\n\n\n${ROOTFS_SIZE}\np\nw\n" | fdisk ${CFDEV}
echo -e "n\np\n\n\n${ROOTFS_SIZE}\nn\np\n\n\n${OPT_FS_SIZE}\nn\np\n\n\n\np\nw\n" | fdisk ${CFDEV}

_log "Forcing kernel to re-read the partition table."
partprobe ${CFDEV}

_log "Checking whether that has worked. If it doesn't, remove the CF and re-insert it."
fdisk -l ${CFDEV} 

_log "Formating the partitions as ext2 (/ and /boot) and ext3 (all others)"
mkfs.ext2    ${CFDEV}1
mkfs.ext2    ${CFDEV}2
mkfs.ext3 -j ${CFDEV}3

_log "Make sure the system partitions (/ and /boot) do not require regular fs checks:"
tune2fs -c 0 ${CFDEV}1
tune2fs -c 0 ${CFDEV}2

_log "Creating mountpoint ${MNTPNT} on host system"
mkdir -p ${MNTPNT}

_log "ENDED STAGE 1/5: Preparing CF"
echo " "

#########################
_log "START STAGE 2/5: Installation of Voyage Linux onto CF"

_log "Creating install dir ${DIST_DIR} if it doesn't exist"
mkdir -p $DIST_BASE

if ! [ -d ${DIST_DIR} ] ; then
    VOYAGE_TARBALL="voyage-${VER}.tar.bz2"
    VOYAGE_URL="http://mirror.voyage.hk/download/voyage/${VOYAGE_TARBALL}"
    _log "Fetching Voyage binary distribution tarball ${VOYAGE_URL}"
    (
        cd $DIST_BASE
        wget -c -4 ${VOYAGE_URL}
        tar xjf ${VOYAGE_TARBALL}
    )
fi


_log "KEY STEP: Installing now Voyage Linux onto ${CFDEV}!"
( 
    cd ${DIST_DIR}
    ./usr/local/sbin/voyage.update -i -P ALIX -t ${CFDEV} -p 1 -b 1 -g -s 38400 -c serial -m ${MNTPNT} -d ${PWD} -U
)

_log "Mounting ${CFDEV}1 on DAD root ${MNTPNT} (if it isn't already)"
grep -q " ${MNTPNT} " /proc/mounts || mount ${CFDEV}1 ${MNTPNT}


UMOUNTS="/"
BINDMOUNTS="/dev /dev/pts /proc"
for fs in ${BINDMOUNTS} ; do
    _log "Bind-mounting ${fs} into DAD root ${MNTPNT} (if it isn't already)"
    UMOUNTS="${fs} ${UMOUNTS}"
    grep -q " ${MNTPNT}${fs} " /proc/mounts || mount -o bind {,${MNTPNT}}${fs}
done


_log "ENDED STAGE 2/5: Installation of Voyage Linux onto CF"
echo " "

#########################
_log "ENDED STAGE 3/5: Configure Voyage Linux (1/2) from the host system"

_log "Creating install dir ${DIST_DIR} if it doesn't exist"
_log "Copying DNS resolver setting from host system"
cat /etc/resolv.conf > ${MNTPNT}/run/resolvconf/resolv.conf


_log "Setting hostname"
echo ${HOSTNAME} > ${MNTPNT}/etc/hostname
echo ${HOSTNAME} > ${MNTPNT}/etc/mailname


_log "Preparing /etc/hosts table"
cat << EOF > ${MNTPNT}/etc/hosts
127.0.0.1 localhost
127.0.1.1 ${HOSTNAME}
EOF


_log "rsync'ing skeleton directory into DAD root"
chown -R 0:0 ${SKEL}
chmod -R go-w ${SKEL}
rsync -a ${SKEL}/ ${MNTPNT}/


_log "Applying patches to some files"
for file in /etc/init.d/halt ; do
    patch ${MNTPNT}${file} < ${MNTPNT}${file}.patch
    rm ${MNTPNT}${file}.patch
done


_log "Adding partitions to fstab"
mkdir -p ${MNTPNT}/{opt,data}
echo "/dev/hda2      /opt    ext2   rw,noatime,errors=remount-ro    0 0" >>  ${MNTPNT}/etc/fstab
echo "/dev/hda3      /data   ext3   rw,noatime,errors=remount-ro    0 0" >>  ${MNTPNT}/etc/fstab


_log "Disabling module not to be used for ALIX2/3"
sed '/^w83627hf$/d' -i ${MNTPNT}/etc/modules


_log "Enabling system to read/set Real-Time clock (RTC)"
echo "rtc" >> ${MNTPNT}/etc/modules
echo "HCTOSYS_DEVICE=rtc" >> ${MNTPNT}/etc/default/hwclock


_log "Setting root mail alias"
echo "root: ${ROOTALIAS}" >> ${MNTPNT}/etc/aliases


mkdir -m 700 ${MNTPNT}/root/.ssh
for key in ${SSH_KEYS} ; do
    _log "Appending SSH ${key}"
    wget -4 -O- "${SSH_KEY_REPO}/${key}" >> ${MNTPNT}/root/.ssh/authorized_keys
done
    

_log "Configuring OpenVPN"
(
    cd ${MNTPNT}/etc/openvpn/

    cp -a ${CA_BASE}/${VPN_CLIENT_CERT} .
    cp -a ${CA_BASE}/${VPN_CLIENT_KEY}  .
    
    ln -s ${VPN_CLIENT_CERT} client.crt
    ln -s ${VPN_CLIENT_KEY}  client.key
)
sed -e "s/^remote.*$/remote $VPN_REMOTE/" -i ${MNTPNT}/etc/openvpn/client.conf


# TODO: Configure SmartHost for Postfix
# (sed 'relayhost' option)


_log "ENDED STAGE 3/5: Configure Voyage Linux (1/2) from the host system"
echo " "

#########################
_log "START STAGE 4/5: Configure Voyage Linux (2/2) from inside the DAD's system root"

_log "Executing ${CHROOT_SCRIPT} chroot'ed within DAD system root ${MNTPNT}"
cp -a ${CHROOT_SCRIPT} ${MNTPNT}/tmp/deploy
chroot ${MNTPNT} /tmp/deploy

_log "ENDED STAGE 4/5: Configure Voyage Linux (2/2) from inside the DAD's system root"
echo " "

#########################
_log "START STAGE 5/5: Clean up"

# Close bind-mounts
sleep 5
for fs in ${UMOUNTS} ; do
    _log "Unmounting ${MNTPNT}${fs}"
    umount ${MNTPNT}${fs}
    sleep 2
done


_log "ENDED STAGE 5/5: Clean up"
